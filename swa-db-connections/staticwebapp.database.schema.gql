type Joint @model {
  id: ID
  PointDay: Int
  PointDateTime: String
  PointDayTime: Int
  targetTemperature: Float
  currTemperature: Float
  airInterval: Float
  airDuration: Float
  heatInterval: Float
  heatDuration: Float
  relayName0: String
  relayMetricValue0: Int
  relayName1: String
  relayMetricValue1: Int
  relayName2: String
  relayMetricValue2: Int
  relayName3: String
  relayMetricValue3: Int
}
type Point @model {
  id: ID
  PointDay: Int
  PointDateTime: String
  PointYearMonth: Int
  PointDayTime: Int
  pvVolts: String
  pvAmps: String
  pvWatts: String
}
type Total @model {
  id: ID
  TotalBucket: Int
  LastUpdateDateTime: String
  TotalValue: String
  AmpMaxValue: String
  WattMaxValue: String
}
type YearTotal @model {
  id: ID
  TotalBucket: Int
  LastUpdateDateTime: String
  TotalValue: String
}
type Book @model {
  id: ID
  MediaTypeId: Int
  Name: String
  TakenDateTime: String
  TakenFileTime: Int
  CategoryTags: String
  MenuTags: String
  AlbumTags: String
  Title: String
  Description: String
  People: String
  ToBeProcessed: Boolean
  SearchStr: String
  Selected: Boolean
}
"""
  Selected(defVal: SelectedDefVal = false): Boolean
type MenuType {
  MenuItem: String
}
type CategoryType {
  CategoryName: String
  Menu: [MenuType]
}
type Mtype @model {
  id: ID
  MediaTypeId: Int
  MediaTypeDesc: String
  
              Category {
                CategoryName
                Menu {
                    MenuItem
                }
            }

type MenuType {
  MenuItem: String
}
type CategoryType {
  CategoryName: String
  Menu: [MenuType]
}
type Mtype @model {
  id: ID
  MediaTypeId: Int
  MediaTypeDesc: String
  Category: [CategoryType!]
}
"""
type Mtype @model {
  id: ID
  MediaTypeId: Int
  MediaTypeDesc: String
  Category: [String]  # test
}

type Malbum @model {
  id: ID
  MediaAlbumId: Int
  AlbumKey: String
  AlbumName: String
  AlbumDesc: String
}
type Mpeople @model {
  id: ID
  MediaPeopleId: Int
  PeopleName: String
}

